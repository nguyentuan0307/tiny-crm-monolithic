// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TinyCRM.Infrastructure;

#nullable disable

namespace TinyCRM.API.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20230714073500_seed-data-for-Account")]
    partial class seeddataforAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TinyCRM.Domain.Entities.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("010d0dd0-09c4-47cc-86e2-edcb23632e81"),
                            Address = "Address - 1",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4752),
                            Email = "account1@gmail.com",
                            Name = "Account 1",
                            Phone = "1",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("3dac8fb8-9107-47b4-bb40-c8f202ffa729"),
                            Address = "Address - 2",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4768),
                            Email = "account2@gmail.com",
                            Name = "Account 2",
                            Phone = "2",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("0a034c7e-032a-4a20-b717-25c5414f6ffc"),
                            Address = "Address - 3",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4774),
                            Email = "account3@gmail.com",
                            Name = "Account 3",
                            Phone = "3",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("c03445ba-0d11-4231-a790-cde72d446924"),
                            Address = "Address - 4",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4792),
                            Email = "account4@gmail.com",
                            Name = "Account 4",
                            Phone = "4",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("0b2db0fb-df41-4c47-971c-ca5b4b6e0eb7"),
                            Address = "Address - 5",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4797),
                            Email = "account5@gmail.com",
                            Name = "Account 5",
                            Phone = "5",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("05424e00-595c-4920-b4c3-ac33e588fd12"),
                            Address = "Address - 6",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4803),
                            Email = "account6@gmail.com",
                            Name = "Account 6",
                            Phone = "6",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("d904216b-8edb-4b76-83e6-a1cfc55d5148"),
                            Address = "Address - 7",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4808),
                            Email = "account7@gmail.com",
                            Name = "Account 7",
                            Phone = "7",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("45ef8fa4-a5ea-4c42-85a8-e1260a88c1b1"),
                            Address = "Address - 8",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4812),
                            Email = "account8@gmail.com",
                            Name = "Account 8",
                            Phone = "8",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("5ecc86cc-b757-4f43-8e91-894ddb477d96"),
                            Address = "Address - 9",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4842),
                            Email = "account9@gmail.com",
                            Name = "Account 9",
                            Phone = "9",
                            TotalSale = 0m
                        },
                        new
                        {
                            Id = new Guid("cfdfb404-274c-48cd-bb07-3157ce54057c"),
                            Address = "Address - 10",
                            CreatedDate = new DateTime(2023, 7, 14, 14, 35, 0, 715, DateTimeKind.Local).AddTicks(4850),
                            Email = "account10@gmail.com",
                            Name = "Account 10",
                            Phone = "10",
                            TotalSale = 0m
                        });
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Contacts.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Deals.Deal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusDeal")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeadId")
                        .IsUnique();

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Leads.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateQuanlified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal>("EstimatedRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReasonDisqualification")
                        .HasColumnType("int");

                    b.Property<int>("SourceLead")
                        .HasColumnType("int");

                    b.Property<int>("StatusLead")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.ProductDeals.ProductDeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDeals");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TypeProduct")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Contacts.Contact", b =>
                {
                    b.HasOne("TinyCRM.Domain.Entities.Accounts.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Deals.Deal", b =>
                {
                    b.HasOne("TinyCRM.Domain.Entities.Leads.Lead", "Lead")
                        .WithOne("Deal")
                        .HasForeignKey("TinyCRM.Domain.Entities.Deals.Deal", "LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Leads.Lead", b =>
                {
                    b.HasOne("TinyCRM.Domain.Entities.Accounts.Account", "Account")
                        .WithMany("Leads")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.ProductDeals.ProductDeal", b =>
                {
                    b.HasOne("TinyCRM.Domain.Entities.Deals.Deal", "Deal")
                        .WithMany("ProductDeals")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TinyCRM.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductDeals")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Accounts.Account", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Leads");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Deals.Deal", b =>
                {
                    b.Navigation("ProductDeals");
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Leads.Lead", b =>
                {
                    b.Navigation("Deal")
                        .IsRequired();
                });

            modelBuilder.Entity("TinyCRM.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("ProductDeals");
                });
#pragma warning restore 612, 618
        }
    }
}
